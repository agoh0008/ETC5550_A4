# MA part
ma_sum <- sum(ifelse(theta != 0 && i > length(theta), theta * error[(i - 1):(i - length(theta))], 0))
y[i] <- c + ar_sum + ma_sum + error[i]
}
# Discard initial observations
y <- y[(extra_points + 1):total_points]
return(y)
}
# Testing Function
library(fpp3)
set.seed(111)
# Define parameters
n <- 500
c <- 2
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(111)
# Define parameters
n <- 500
c <- 0
phi <- NULL
theta <- NULL
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(111)
# Define parameters
n <- 500
c <- 0
phi <- NULL
theta <- NULL
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(111)
tsibble(time = 1:n, y = generate_arma11(n, c,
phi = 0, theta = 0),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
generate_arma11 <- function(n = 100, c = 0, phi, theta, sigma = 1) {
# Generate errors
error <- rnorm(n, mean = 0, sd = sigma)
# Set up vector for the response with initial values set to 0
y <- rep(0, n)
# Generate remaining observations
for(i in seq(2, length = n-1)) {
# AR(1)
# y[i] <- c + phi * y[i-1] + error[i]
# MA(1)
# y[i] <- c + error[i] + theta * error[i -1]
# ARMA(1, 1)
y [i] <- c + phi * y[i-1] + error[i] + theta * error[i -1]
}
return(y)
}
set.seed(111)
tsibble(time = 1:n, y = generate_arma11(n, c,
phi = 0, theta = 0),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(111)
generate_arma(n, c, phi, theta)
set.seed(1408)
# phi = NULL
generate_arma(n, c, phi, theta)
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- NULL
theta <- NULL
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
generate_arma <- function(n = 100, c = 0, phi = NULL, theta = NULL, sigma = 1) {
# Default phi and theta to 0 if NULL
if (is.null(phi)) phi <- 0
if (is.null(theta)) theta <- 0
# Check for stationarity
if (!(!any(abs(polyroot(c(1, -phi))) <= 1))) {
stop("AR parameters do not satisfy stationarity condition.")
}
# Check for invertibility
if (!(!any(abs(polyroot(c(1, theta))) <= 1))) {
stop("MA parameters do not satisfy invertibility condition.")
}
# Generate more data points to allow for burn-in
extra_points <- max(length(phi), length(theta))  # Adjust based on the maximum lag
total_points <- n + extra_points
# Generate errors
error <- rnorm(total_points, mean = 0, sd = sigma)
# Set up vector for the response
y <- numeric(total_points)
# Generate remaining observations
for (i in seq_along(y)) {
# AR part
ar_sum <- sum(ifelse(phi != 0 && i > length(phi),
phi * y[(i - 1):(i - length(phi))], 0))
# MA part
ma_sum <- sum(ifelse(theta != 0 && i > length(theta),
theta * error[(i - 1):(i - length(theta))], 0))
y[i] <- c + ar_sum + ma_sum + error[i]
}
# Discard initial observations
y <- y[(extra_points + 1):total_points]
return(y)
}
# Testing Function
library(fpp3)
set.seed(111)
# Define parameters
n <- 500
c <- 2
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
generate_arma <- function(n = 100, c = 0, phi = NULL, theta = NULL, sigma = 1) {
# Default phi and theta to 0 if NULL
if (is.null(phi)) phi <- 0
if (is.null(theta)) theta <- 0
# Check for stationarity
if (!(!any(abs(polyroot(c(1, -phi))) <= 1))) {
stop("AR parameters do not satisfy stationarity condition.")
}
# Check for invertibility
if (!(!any(abs(polyroot(c(1, theta))) <= 1))) {
stop("MA parameters do not satisfy invertibility condition.")
}
# Generate more data points to allow for burn-in
extra_points <- max(length(phi), length(theta))  # Adjust based on the maximum lag
total_points <- n + extra_points
# Generate errors
error <- rnorm(total_points, mean = 0, sd = sigma)
# Set up vector for the response
y <- numeric(total_points)
# Generate remaining observations
for (i in seq_along(y)) {
# AR part
ar_sum <- sum(ifelse(phi != 0 && i > length(phi),
phi * y[(i - 1):(i - length(phi))], 0))
# MA part
ma_sum <- sum(ifelse(theta != 0 && i > length(theta),
theta * error[(i - 1):(i - length(theta))], 0))
y[i] <- c + ar_sum + ma_sum + error[i]
}
# Discard initial observations
y <- y[(extra_points + 1):total_points]
return(y)
}
# Testing Function
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 2
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.6
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.6
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
generate_arma11 <- function(n = 100, c = 0, phi, theta, sigma = 1) {
# Generate errors
error <- rnorm(n, mean = 0, sd = sigma)
# Set up vector for the response with initial values set to 0
y <- rep(0, n)
# Generate remaining observations
for(i in seq(2, length = n-1)) {
# AR(1)
# y[i] <- c + phi * y[i-1] + error[i]
# MA(1)
# y[i] <- c + error[i] + theta * error[i -1]
# ARMA(1, 1)
y [i] <- c + phi * y[i-1] + error[i] + theta * error[i -1]
}
return(y)
}
set.seed(1408)
tsibble(time = 1:n, y = generate_arma11(n, c,
phi = 0, theta = 0),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(1408)
tsibble(time = 1:n, y = generate_arma11(n, c,
phi = 0, theta = 0),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
generate_arma11 <- function(n = 100, c = 0, phi, theta, sigma = 1) {
# Generate errors
error <- rnorm(n, mean = 0, sd = sigma)
# Set up vector for the response with initial values set to 0
y <- rep(0, n)
# Generate remaining observations
for(i in seq(2, length = n-1)) {
# AR(1)
# y[i] <- c + phi * y[i-1] + error[i]
# MA(1)
# y[i] <- c + error[i] + theta * error[i -1]
# ARMA(1, 1)
y [i] <- c + phi * y[i-1] + error[i] + theta * error[i -1]
}
return(y)
}
set.seed(1408)
tsibble(time = 1:n, y = generate_arma11(n, c,
phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.6
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(1408)
tsibble(time = 1:n, y = generate_arma11(n, c,
phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.2
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.2
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(1408)
tsibble(time = 1:n, y = generate_arma11(n, c,
phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
# set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.2
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
# set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.2
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
tsibble(time = 1:n, y = generate_arma11(n, c,
phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.2
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
library(fpp3)
set.seed(1408)
# Define parameters
n <- 500
c <- 0
phi <- 0.6
theta <- 0.2
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n, c, phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
tsibble(time = 1:n, y = generate_arma11(n, c,
phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial"
tsibble(time = 1:n, y = generate_arma11(n, c,
set.seed(1408)
tsibble(time = 1:n, y = generate_arma11(n, c,
phi, theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
generate_arma <- function(n = 100, c = 0, phi = NULL, theta = NULL, sigma = 1) {
# Default phi and theta to 0 if NULL
if (is.null(phi)) phi <- numeric()
if (is.null(theta)) theta <- numeric()
# Check for stationarity
if (!(!any(abs(polyroot(c(1, -phi))) <= 1))) {
stop("AR parameters do not satisfy stationarity condition.")
}
# Check for invertibility
if (!(!any(abs(polyroot(c(1, theta))) <= 1))) {
stop("MA parameters do not satisfy invertibility condition.")
}
# Generate more data points to allow for burn-in
extra_points <- max(length(phi), length(theta))  # Adjust based on the maximum lag
total_points <- n + extra_points
# Generate errors
error <- rnorm(total_points, mean = 0, sd = sigma)
# Set up vector for the response
y <- numeric(total_points)
# Generate remaining observations
for (i in seq_along(y)) {
# AR part
ar_sum <- sum(ifelse(length(phi) > 0 && i > length(phi),
phi * y[(i - 1):(i - length(phi))], 0))
# MA part
ma_sum <- sum(ifelse(length(theta) > 0 && i > length(theta),
theta * error[(i - 1):(i - length(theta))], 0))
y[i] <- c + ar_sum + ma_sum + error[i]
}
# Discard initial observations
y <- y[(extra_points + 1):total_points]
return(y)
}
# Testing Function
# library(fpp3)
# set.seed(1408)
# Define parameters
# n <- 500
# c <- 0
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
# phi = 0.4
# theta = 0
# sigma <- 1
# tsibble(time = 1:n, y = generate_arma(n = n, c = c,
#                                      phi = phi, theta = theta),
#        index = time) |>
#  gg_tsdisplay(y, plot_type = "partial")
# generate_arma(n = n, c = c,
#              phi = phi, theta = theta)
# doing some tests
library(feasts)
library(dplyr)
library(fpp3)
# testing for random walk ARMA null null
set.seed(1408)
# Define parameters
n <- 500
c <- 2
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(1408)
# Define parameters
n <- 500
c <- 2
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
phi = 0
theta = 0
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c,
phi = phi, theta = theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
tsibble(time = 1:500, y = generate_arma(n=500, c=1, phi=0, theta=0), index = time) |>
gg_tsdisplay(y, plot_type = "partial")
tsibble(time = 1:500, y = generate_arma(n=500, c=1, phi=0, theta=0), index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(1408)
# Define parameters
n <- 500
c <- 0
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
phi = 0.6
theta = 0.2
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c,
phi = phi, theta = theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(2002)
tsibble(time = 1:50, y = generate_arma(n=50, c=1, phi=, theta=), index = time) |>
autoplot(y)
set.seed(202)
generate_arma(n=50, c=1, phi= , theta= )
set.seed(2002)
tsibble(time = 1:50, y = generate_arma(n=50, c=1, phi=, theta=), index = time) |>
autoplot(y)
set.seed(2002)
tsibble(time = 1:50, y = generate_arma(n=50, c=1, phi=, theta=), index = time) |>
autoplot(y)
set.seed(1408)
tsibble(time = 1:500, y = generate_arma(n=500, c=1, phi=0, theta=0), index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(1408)
generate_arma(n=500, c=1, phi=0, theta=0)
Test for ARMA(NULL, NULL)
set.seed(1408)
# Define parameters
n <- 500
c <- 2
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(1408)
# Define parameters
n <- 500
c <- 0
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
phi = 0.6
theta = 0.2
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c,
phi = phi, theta = theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
set.seed(1408)
# Define parameters
n <- 500
c <- 0
# phi <- 0.4
# theta <- c(0.3, -0.6)
# phi <- NULL
# theta <- NULL
phi = 0.4
theta = 0
sigma <- 1
tsibble(time = 1:n, y = generate_arma(n = n, c = c,
phi = phi, theta = theta),
index = time) |>
gg_tsdisplay(y, plot_type = "partial")
